<?xml version="1.0"?>
<!--
  Universal robot ur3 launch.  Loads ur3 robot description (see ur_common.launch
  for more info)

  Usage:
    ur3_bringup.launch robot_ip:=<value>
-->
<launch>
  
  <!-- robot_ip: IP-address of the robot's socket-messaging server -->
  <arg name="robot_ip" doc="IP of the controller" />
  <arg name="reverse_port" default="50001" doc="Port on which controller listens for position values passed to servoj thread from the driver" />
  <arg name="limited" default="false" doc="If true, limits joint range [-PI, PI] on all joints."/>
  <arg name="min_payload"  default="0.0" doc="lower payload bound for the robot" />
  <arg name="max_payload"  default="3.0" doc="upper payload bound for the robot" />

  <!-- robot model -->
  <include file="$(find ur_description_original)/launch/ur3_upload.launch">
    <arg name="limited" value="$(arg limited)"/>
  </include>
  
  <!-- ur common -->
  <include file="$(find ur_bringup_original)/launch/ur_common.launch">
    <arg name="robot_ip" value="$(arg robot_ip)"/>
    <arg name="reverse_port" value="$(arg reverse_port)"/>
    <arg name="min_payload"  value="$(arg min_payload)"/>
    <arg name="max_payload"  value="$(arg max_payload)"/>
  </include>

</launch>


--------------------------------------------------------------------------------

<?xml version="1.0"?>
<launch>
  <arg name="limited" default="false" doc="If true, limits joint range [-PI, PI] on all joints." />
  
  <param unless="$(arg limited)" name="robot_description" command="$(find xacro)/xacro --inorder '$(find ur_description_original)/urdf/ur3_robot.urdf.xacro'" />
  <param if="$(arg limited)" name="robot_description" command="$(find xacro)/xacro --inorder '$(find ur_description_original)/urdf/ur3_joint_limited_robot.urdf.xacro'" />
</launch>


--------------------------------------------------------------------------------

<?xml version="1.0"?>
<!--
  Universal robot common bringup.  Starts ur driver node and robot state
  publisher (translates joint positions to propper tfs).
  
  NOTE: This launch file also starts a tf2 node, which is not typically
  used

  Usage:
    ur_common.launch robot_ip:=<value>
-->
<launch>
  <!-- robot_ip: IP-address of the robot's socket-messaging server -->
  <arg name="robot_ip" doc="IP of the controller" />
  <arg name="reverse_port" default="50001" doc="Port on which controller listens for position values passed to servoj thread from the driver" />
  <arg name="min_payload" doc="lower payload bound for the robot" />
  <arg name="max_payload" doc="upper payload bound for the robot" />
  <arg name="prefix" default="" doc="Prefix to robot's joints' and links' names" />
  
  <!-- The max_velocity parameter is only used for debugging in the ur_driver. It's not related to actual velocity limits -->
  <arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->
  
  <!-- copy the specified IP address to be consistant with ROS-Industrial spec.
  NOTE: The ip address is actually passed to the driver on the command line -->
  <param name="/robot_ip_address" type="str" value="$(arg robot_ip)"/>
  <param name="/robot_reverse_port" type="int" value="$(arg reverse_port)"/>
  
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <!-- driver -->
  <node name="ur_driver" pkg="ur_driver" type="driver.py" args="$(arg robot_ip) $(arg reverse_port)" output="screen">
    <param name="min_payload" type="double" value="$(arg min_payload)"/>
    <param name="max_payload" type="double" value="$(arg max_payload)"/>
    <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
    <param name="prefix" type="string" value="$(arg prefix)"/>
  </node>
   
  <!-- TF Buffer Server -->
  <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server">
    <param name="buffer_size" value="120.0"/>
  </node>

</launch>


--------------------------------------------------------------------------------















































