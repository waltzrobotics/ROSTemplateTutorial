#! /usr/bin/env python

"""
name - a string which specifies the name under which this parameter should be stored

paramtype - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t

level - A bitmask which will later be passed to the dynamic reconfigure callback. When the callback is called all of the level values for parameters that have been changed are ORed together and the resulting value is passed to the callback.

description - string which describes the parameter

default - specifies the default value

min - specifies the min value (optional and does not apply to strings and bools)

max - specifies the max value (optional and does not apply to strings and bools)
"""

PACKAGE='dynamic_reconfigure_8'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()
#       Name       Type      Level Description                Default Min   Max
gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

exit(gen.generate(PACKAGE, "dynamic_reconfigure_8", "example"))


#from math import pi
#from geometry_msgs.msg import Point


# angles = gen.add_group("Angles")
# #       Name                    Type      Reconfiguration level
# #       Description
# #       Default  Min  Max
# angles.add("min_ang",           double_t, SensorLevels.RECONFIGURE_STOP,
#            "The angle of the first range measurement. The unit depends on ~ang_radians.",
#            -pi/2,-pi, pi)
# angles.add("max_ang",           double_t, SensorLevels.RECONFIGURE_STOP,
#            "The angle of the first range measurement. The unit depends on ~ang_radians.",
#             pi/2, -pi, pi)
# gen.add("intensity",            bool_t,   SensorLevels.RECONFIGURE_STOP,
#         "Whether or not the hokuyo returns intensity values.",
#          False)
# gen.add("cluster",              int_t,    SensorLevels.RECONFIGURE_STOP,
#         "The number of adjacent range measurements to cluster into a single reading",
#          1, 0, 99)
# gen.add("skip",                 int_t,    SensorLevels.RECONFIGURE_STOP,
#         "The number of scans to skip between each measured scan",
#          0, 0,  9)
# gen.add("port",                 str_t,    SensorLevels.RECONFIGURE_CLOSE,
#         "The serial port where the hokuyo device can be found",
#         "/dev/ttyACM0")
# gen.add("calibrate_time",       bool_t,   SensorLevels.RECONFIGURE_CLOSE,
#         "Whether the node should calibrate the hokuyo's time offset",
#          True)
# gen.add("frame_id",             str_t,    SensorLevels.RECONFIGURE_RUNNING,
#         "The frame in which laser scans will be returned",
#         "laser")
# gen.add("time_offset",          double_t, SensorLevels.RECONFIGURE_RUNNING,
#         "An offet to add to the timestamp before publication of a scan",
#          0, -0.25, 0.25)
# gen.add("allow_unsafe_settings",bool_t,   SensorLevels.RECONFIGURE_CLOSE,
#         "Turn this on if you wish to use the UTM-30LX with an unsafe angular range. Turning this option on may cause occasional crashes or bad data. This option is a tempory workaround that will hopefully be removed in an upcoming driver version.",
#          False)

#exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "MyStuff"))


# points = gen.add_group("Point")

# points.add("x_component",           double_t, Point.x,
#             "X point component.",
#             0, -1, 1)  # assuming defult, min, max
